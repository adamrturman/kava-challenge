[{"/Users/adamrturman/Desktop/coding/Kava/kava/src/reportWebVitals.js":"1","/Users/adamrturman/Desktop/coding/Kava/kava/src/App.js":"2","/Users/adamrturman/Desktop/coding/Kava/kava/src/Chart/Chart.js":"3","/Users/adamrturman/Desktop/coding/Kava/kava/src/index.js":"4","/Users/adamrturman/Desktop/coding/Kava/kava/src/Landing/Landing.js":"5","/Users/adamrturman/Desktop/coding/Kava/kava/src/Data/Data.js":"6","/Users/adamrturman/Desktop/coding/Kava/kava/src/LoadingSpinner/LoadingSpinner.js":"7"},{"size":362,"mtime":1611880145770,"results":"8","hashOfConfig":"9"},{"size":985,"mtime":1611968413157,"results":"10","hashOfConfig":"9"},{"size":606,"mtime":1611968941885,"results":"11","hashOfConfig":"9"},{"size":547,"mtime":1611882061711,"results":"12","hashOfConfig":"9"},{"size":802,"mtime":1611966420181,"results":"13","hashOfConfig":"9"},{"size":2986,"mtime":1611969992976,"results":"14","hashOfConfig":"9"},{"size":318,"mtime":1611971538733,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qvgtrs",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adamrturman/Desktop/coding/Kava/kava/src/reportWebVitals.js",[],"/Users/adamrturman/Desktop/coding/Kava/kava/src/App.js",[],"/Users/adamrturman/Desktop/coding/Kava/kava/src/Chart/Chart.js",[],"/Users/adamrturman/Desktop/coding/Kava/kava/src/index.js",[],"/Users/adamrturman/Desktop/coding/Kava/kava/src/Landing/Landing.js",[],"/Users/adamrturman/Desktop/coding/Kava/kava/src/Data/Data.js",["31"],"import React from 'react'\nimport Chart from '../Chart/Chart'\nimport Card from 'react-bootstrap/Card'\nimport Button from 'react-bootstrap/Button'\nimport styles from './Data.module.css';\n\n\nfunction Data(props) {\n    const { data, setShowData } = props;\n\n    const totalTransactions = countTransactions(data)\n    const medianTransaction = median(data)\n    const sortedTransactions = sortedData(data)\n    const largestTransaction = maxTransaction(sortedTransactions)\n    const maxInvestor = findInvestor(data, largestTransaction)\n    const averageTransaction = sum(data) / totalTransactions\n    const addresses = data.map((transaction) => {\n        return transaction.delegator_address\n    })\n\n    const amounts = data.map((transaction) => {\n        return transaction.shares\n    })\n\n    const mappedSortedData = sortedTransactions.map((transaction) => {\n        return transaction\n    })\n\n    function countTransactions(data) {\n        return data.length\n    }\n\n    function median(data) {\n        return Math.floor(totalTransactions / 2 + 1)\n    }\n\n    function sortedData(data) {\n        const allShares = data.map((transaction) => {\n            return transaction.shares\n        })\n        return allShares.sort((a, b) => a - b)\n    }\n\n    function maxTransaction(sortedData) {\n        return sortedData[sortedData.length - 1]\n    }\n\n    function sum(data) {\n        let total = 0\n        data.forEach((transaction) => {\n            total += parseInt(transaction.shares)\n        })\n        return total\n    }\n\n    function findInvestor(data, amount) {\n        for (let i = 0; i < data.length; i++) {\n            if (data[i].shares == amount) {\n                return data[i].delegator_address\n            }\n        }\n    }\n    return (\n        <div>\n            {props.showData ?\n                <>\n                    <div className=\"col-sm-10 col-md-6 mx-auto mt-5\">\n                        <Card className={styles.info}>\n                            <Card.Header>Data</Card.Header>\n                            <Card.Body>\n                                <div>There are <span>{totalTransactions}</span> total transactions</div>\n                                <div>The median value is <span>{mappedSortedData[medianTransaction]}</span> </div>\n                                <div>The average value of all transactions is <span>{averageTransaction}</span></div>\n                                <div>The maximum transaction value is <span>{largestTransaction}</span><br /> and was made by <span>{maxInvestor}</span></div>\n                                <Button className={styles.button} onClick={() => setShowData(false)}>Return to Homepage</Button>\n                            </Card.Body>\n                        </Card>\n                    </div>\n                    <div className=\"col-sm-10\">\n                        <Chart addresses={addresses} amounts={amounts} />\n                    </div>\n                </>\n                : null}\n        </div>\n    )\n}\n\nexport default Data","/Users/adamrturman/Desktop/coding/Kava/kava/src/LoadingSpinner/LoadingSpinner.js",[],{"ruleId":"32","severity":1,"message":"33","line":58,"column":32,"nodeType":"34","messageId":"35","endLine":58,"endColumn":34},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]