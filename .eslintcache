[{"/Users/adamrturman/Desktop/coding/Kava/kava/src/reportWebVitals.js":"1","/Users/adamrturman/Desktop/coding/Kava/kava/src/App.js":"2","/Users/adamrturman/Desktop/coding/Kava/kava/src/Chart/Chart.js":"3","/Users/adamrturman/Desktop/coding/Kava/kava/src/index.js":"4"},{"size":362,"mtime":1611880145770,"results":"5","hashOfConfig":"6"},{"size":3263,"mtime":1611884571928,"results":"7","hashOfConfig":"6"},{"size":605,"mtime":1611884585354,"results":"8","hashOfConfig":"6"},{"size":547,"mtime":1611882061711,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qvgtrs",{"filePath":"12","messages":"13","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/adamrturman/Desktop/coding/Kava/kava/src/reportWebVitals.js",[],"/Users/adamrturman/Desktop/coding/Kava/kava/src/App.js",["19","20"],"import styles from './App.module.css';\nimport React, { useState } from 'react'\nimport MyChart from './Chart/Chart'\nimport Button from 'react-bootstrap/Button'\nimport Card from 'react-bootstrap/Card'\nimport logo from './img/Kava-logo.svg'\n\n\nfunction App() {\n  const [data, setData] = useState([])\n  const [showData, setShowData] = useState(false)\n\n\n\n  const displayData = (event) => {\n    fetch(\"https://ipfs.io/ipfs/QmbZiEejjAmdEmtF71WLPuY3dwkeMPCmcVxaj7N8aH56Zw/kava-4-export-20210122.json\")\n      .then((response) => response.json())\n      .then((data) => setData(data.app_state.staking.delegations))\n      .then(setShowData(true))\n  }\n\n  const totalTransactions = countTransactions(data)\n  const medianTransaction = median(data)\n  const sortedTransactions = sortedData(data)\n  const largestTransaction = maxTransaction(sortedTransactions)\n  const maxInvestor = findInvestor(data, largestTransaction)\n  const averageTransaction = sum(data) / totalTransactions\n  const addresses = data.map((transaction) => {\n    return transaction.delegator_address\n  })\n\n  const amounts = data.map((transaction) => {\n    return transaction.shares\n  })\n\n  const mappedSortedData = sortedTransactions.map((transaction) => {\n    return transaction\n  })\n\n  function countTransactions(data) {\n    return data.length\n  }\n\n  function median(data) {\n    return Math.floor(totalTransactions / 2 + 1)\n  }\n\n  function sortedData(data) {\n    const allShares = data.map((transaction) => {\n      return transaction.shares\n    })\n    return allShares.sort((a, b) => a - b)\n  }\n\n  function maxTransaction(sortedData) {\n    return sortedData[sortedData.length - 1]\n  }\n\n  function sum(data) {\n    let total = 0\n    const allAmounts = data.forEach((transaction) => {\n      total += parseInt(transaction.shares)\n    })\n    return total\n  }\n\n  function findInvestor(data, amount) {\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].shares == amount) {\n        return data[i].delegator_address\n      }\n    }\n  }\n\n  return (\n    <div className={styles.App}>\n      <div className=\"col-sm-10 col-md-6 mx-auto mt-5\">\n        <Card className={styles.info}>\n          <Card.Body>\n            <h1 className={styles.heading}><img src={logo} alt=\"logo\" /></h1>\n            <Button className={styles.button} onClick={displayData}>Render Data</Button>\n          </Card.Body>\n        </Card>\n      </div>\n      {showData ?\n        <div>\n          <div className=\"col-sm-10 col-md-6 mx-auto mt-5\">\n            <Card className={styles.info}>\n              <Card.Header>Data</Card.Header>\n              <Card.Body>\n                <div>There are <span>{totalTransactions}</span> total transactions</div>\n                <div>The median value is <span>{mappedSortedData[medianTransaction]}</span> </div>\n                <div>The average value of all transactions is <span>{averageTransaction}</span></div>\n                <div>The maximum transaction value is <span>{largestTransaction}</span><br /> and was made by <span>{maxInvestor}</span></div>\n              </Card.Body>\n            </Card>\n          </div>\n          <div className=\"col-sm-10\">\n            <MyChart addresses={addresses} amounts={amounts} />\n          </div>\n        </div>\n        : null}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/adamrturman/Desktop/coding/Kava/kava/src/Chart/Chart.js",[],"/Users/adamrturman/Desktop/coding/Kava/kava/src/index.js",[],{"ruleId":"21","severity":1,"message":"22","line":61,"column":11,"nodeType":"23","messageId":"24","endLine":61,"endColumn":21},{"ruleId":"25","severity":1,"message":"26","line":69,"column":26,"nodeType":"27","messageId":"28","endLine":69,"endColumn":28},"no-unused-vars","'allAmounts' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]